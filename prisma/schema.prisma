// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  nome  String
  email String @unique
  senha String
}

model Services {
  id           String                   @id @default(auto()) @map("_id") @db.ObjectId
  nome         String
  tipo         String?
  preco        Int // Para dinheiro, considere usar Decimal no futuro se mudar de DB
  observacao   String?
  agendamentos ServicesOnAgendamentos[]
}

model Parts {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  nome           String
  modelo         String
  estoque        Int
  distribuidor   String?
  data           String?
  garantia       String?
  preco          Int
  observacao     String?
  agendamentos   PartsOnAgendamentos[]
}

model Client {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  nome        String        @unique // Nome do cliente deve ser único para a lógica de 'upsert' funcionar bem
  telefone    String?
  descricao   String?
  vehicles    Vehicle[]     // Renomeado para 'vehicles' (plural) para clareza
  agendamentos Agendamento[]
}

model Vehicle {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  placa     String        @unique
  modelo    String?
  marca     String?
  cor       String?
  cliente   Client        @relation(fields: [clientId], references: [id])
  clientId  String        @db.ObjectId // Corrigido para 'clientId' (camelCase)
  agendamentos Agendamento[]
}

model Agendamento {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  start           DateTime
  backgroundColor String
  descricao       String?

  // --- RELAÇÕES CORRIGIDAS E OBRIGATÓRIAS ---
  cliente         Client   @relation(fields: [clienteId], references: [id])
  clienteId       String   @db.ObjectId // Removido '?' para ser obrigatório

  veiculo         Vehicle  @relation(fields: [veiculoId], references: [id]) // Corrigido para 'veiculo' (singular)
  veiculoId       String   @db.ObjectId // Removido '?' para ser obrigatório
  
  // --- CAMPOS REDUNDANTES REMOVIDOS ---
  // Os campos 'Cliente: String?' e 'veiculo: String?' foram removidos.

  // Relação com Relatório (correta)
  report          Report?  // Agendamento pode ter um Report
  
  // Relações com Serviços e Peças
  servicos        ServicesOnAgendamentos[]
  pecas           PartsOnAgendamentos[]
}

model Report {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  data   DateTime @default(now()) // Corrigido para 'data' (camelCase)
  preco  Float

  // O agendamento é encontrado através da relação inversa, não precisa ser definido aqui.
  // O Prisma sabe que um Report pertence a um Agendamento por causa do campo 'report' no modelo Agendamento.
  agendamento Agendamento @relation(fields: [agendamentoId], references: [id])
  agendamentoId String @unique @db.ObjectId // Garante que cada relatório é de um único agendamento
}

// Tabela de Junção para Serviços em Agendamentos (Muitos-para-Muitos)
model ServicesOnAgendamentos {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  agendamento   Agendamento @relation(fields: [agendamentoId], references: [id])
  agendamentoId String      @db.ObjectId
  service       Services    @relation(fields: [serviceId], references: [id])
  serviceId     String      @db.ObjectId
}

// Tabela de Junção para Peças em Agendamentos (Muitos-para-Muitos)
model PartsOnAgendamentos {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  agendamento   Agendamento @relation(fields: [agendamentoId], references: [id])
  agendamentoId String      @db.ObjectId
  part          Parts       @relation(fields: [partId], references: [id])
  partId        String      @db.ObjectId
}